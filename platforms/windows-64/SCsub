# Worth reading:
# https://docs.python.org/3/faq/windows.html#how-can-i-embed-python-into-a-windows-application
# tl;dr: onyl msvc is supported to link against pythonxx.dll

import os
import glob
import shutil
import subprocess
from itertools import chain
from pathlib import Path
from SCons.Errors import UserError


Import("env")


env["bits"] = "64"


### Godot binary (to run tests) ###


if not env["godot_binary"]:
    env["godot_binary"] = File("godot.windows.opt.debug.64.exe")
    env.Command(
        env["godot_binary"],
        None,
        "curl -L %s/godot.windows.opt.debug.64.exe -o ${TARGET}"
        % env["godot_release_base_url"],
    )
    env.NoClean(env["godot_binary"])


### Python interpreter ###

cpython_src = env.Dir("cpython")
env.Command(
    cpython_src,
    None,
    "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.7.1 --single-branch ${TARGET}",
)
env.NoClean(cpython_src)


# Build dir is within the source dir... which is something scons hates !
# So we merge the two steps together.
cpython_build = env.Dir("cpython/PCBuild/amd64")
env.Command(
    cpython_build,
    None,
    (
        "echo Cloning CPython... && "
        "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.7.1 --single-branch platforms\\windows-64\\cpython && "
        "echo Configuring CPython... && "
        "${TARGET}\\..\\get_externals.bat --python=python && "
        "echo Building CPython... && "
        "${TARGET}\\..\\build.bat -p x64"
    ),
)
env.NoClean(cpython_build)


def add_cpython_to_build_dir(env, target, cpython_build):
    def c(subpath=""):
        return os.path.join(cpython_build.abspath, *subpath.split("/"))

    def p(subpath=""):
        return os.path.join(target.abspath, "pythonscript", *subpath.split("/"))

    os.mkdir(p())

    open(p(".gdignore"), "w").close()

    for pyd in glob.glob(c("*.pyd")):
        shutil.copy(pyd, p())
    for pyd in glob.glob(c("*.dll")):
        shutil.copy(pyd, p())
    shutil.copy(c("python.exe"), p())
    shutil.copy(c("pythonw.exe"), p())

    # Remove __pycache__ to save lots of space
    for root, dirs, files in os.walk(c("../../Lib")):
        if "__pycache__" in dirs:
            shutil.rmtree(os.path.join(root, "__pycache__"))

    shutil.copytree(c("../../Lib"), p("lib"))

    if env["compressed_stdlib"]:
        shutil.make_archive(base_name=p("python37"), format="zip", root_dir=p("lib"))
        shutil.rmtree(p("lib"))
        os.mkdir(p("lib/"))

    def _run_or_die(cmd):
        run = subprocess.Popen(
            cmd.split(),
            cwd=p(),
            shell=True,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
        )
        ret = run.wait()
        if ret:
            stdout, stderr = run.communicate()
            raise RuntimeError(
                "ERROR: `%s` returned %s\n"
                " ===== stdout =====\n%s\n\n"
                " ===== stderr =====\n%s" % (cmd, ret, stdout, stderr)
            )

    _run_or_die("python.exe -m ensurepip")
    _run_or_die("python.exe -m pip install cffi")


def add_pythonscript_stuff_to_build_dir(
    env, target, libpythonscript, _godot_module, godot_module
):
    def p(subpath=""):
        return os.path.join(target.abspath, "pythonscript", *subpath.split("/"))

    try:
        os.mkdir(p())
    except FileExistsError:
        pass

    print(f"Copy {libpythonscript.path} -> {p()}")
    shutil.copy(libpythonscript.path, p())

    print(f"Copy {_godot_module.path} -> {p('lib/site-packages/')}")
    shutil.copy(_godot_module.path, p("lib/site-packages/"))

    if env["dev_dyn"]:
        import _winapi

        if os.path.exists(p("lib/site-packages/godot")):
            print(
                f"dev_dyn: {p('lib/site-packages/godot')} already exists, skip creating NTFS junction"
            )
        else:
            print(
                f"dev_dyn: NTFS junction {godot_module.abspath} -> {p('lib/site-packages/godot')}"
            )
            _winapi.CreateJunction(godot_module.abspath, p("lib/site-packages/godot"))
        env.NoClean(p("lib/site-packages/godot"))

    else:
        dst_dir = Path(p("lib/site-packages/godot"))
        src_dir = Path(godot_module.path)
        print(f"Copy {src_dir} -> {dst_dir}")
        for src_item in chain(
            src_dir.glob("**/*.py"), src_dir.glob("**/*.pyd"), src_dir.glob("**/*.pxd"),
        ):
            dst_item = dst_dir / src_item.relative_to(src_dir)
            dst_item.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy(str(src_item), str(dst_item))


env["add_cpython_to_build_dir"] = add_cpython_to_build_dir
env["add_pythonscript_stuff_to_build_dir"] = add_pythonscript_stuff_to_build_dir
env["backend_dir"] = cpython_build
env.Append(CFLAGS=["-DBACKEND_CPYTHON"])
env.Append(CFLAGS=["-I%s\\..\\.." % cpython_build.path])
env.Append(CFLAGS=["-I%s\\..\\..\\Include" % cpython_build.path])
env.Append(CFLAGS=["-I%s\\..\\..\\PC" % cpython_build.path])
env.Append(LIBPATH=[cpython_build.path])
env.Append(LIBS=["python37"])
